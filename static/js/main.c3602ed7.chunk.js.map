{"version":3,"sources":["Book.js","App.js","serviceWorker.js","index.js"],"names":["Book","_this","this","react_default","a","createElement","id","className","concat","props","book","checked","value","type","onChange","checkBook","index","title","src","image","note","Component","App","state","formData","checkCount","book_list","setBookData","event","preventDefault","copy","slice","push","setState","localStorage","setItem","JSON","stringify","getBookData","newBook","target","originalState","Object","assign","name","clearBookChecked","updatedList","filter","clearAll","getItem","parse","data","_this2","listOfBook","map","src_Book","Count","placeholder","onClick","moment","format","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3602ed7.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from 'react';\nimport './App.css';\nimport './reset.css'\n\n// take the props of note and image and title \n// create checkbox for each book to mark the book as complete\n// change style of mark book by used state\n// hight auto width same size \n\nclass Book extends Component{\n    render(){\n\n       return (\n          <div>\n            <table id=\"Books\">\n              <tr >\n                <th>Title</th>\n                <th>Book</th>\n                <th>note</th>\n              </tr>\n              <tr>\n                <td>\n                  <h2 className={`${this.props.book.checked} header`}> \n                    <input  value=\"0\" \n                            type=\"checkbox\" \n                            checked={this.props.book.checked === \"checked\"? true : false}\n                            onChange={()=>this.props.checkBook(this.props.index)}  />  \n                            {this.props.book.title}\n                  </h2>\n                </td>\n                <td><img className=\"imageBook\" src={this.props.book.image}></img></td>\n                <td> <p className={`${this.props.book.checked} text`} >{this.props.book.note}</p> </td>\n              </tr>\n            </table>\n          </div> \n       );\n   }\n\n}\nexport default Book;","import React, { Component } from 'react';\nimport './App.css';\nimport Book from './Book';\nimport './reset.css';\nimport moment from 'moment';\n\n/* how to take information from Book.js (child)\n -in the parent create arrow function \n -prmeter to pass information \n -pass a refreance to the child as props\n -call the function from child.*/\n\n// declare state to store array of the books list\n//declare function getBookData() to make the users to add book in books list array \n   // declare impty formData of book inside state to fill it by user data \n// declare function setBookData() when users click on the book mark the book as complete, also if users click again delete the mark\n\n\n//  let uncheckedBookVal=true; //global vairable -->take true if item checked otherwise take false\n //let countVal=0;\nclass App extends Component {\n // declare state \n  state= {\n    // formData --> to set new book data input \n    formData:{\n       title:\"\",\n       image:\"\",\n       note:\"\",\n       checked: 'false'\n    },\n    checkCount:0,\n    // book_list store all book data \n     book_list:[\n      {\n        title:\"How to Change Your Mind\",\n        image:\"https://images.gr-assets.com/books/1522586374l/36710811.jpg\",\n        note:\"I finished reading a hundred pages\",\n        checked: 'false',\n       \n      }\n      ,{\n        title:\"The Rise and Fall of the Dinosaurs\",\n       image:\"https://images.gr-assets.com/books/1515529573l/35820369.jpg\",\n       note:\"I read 300 pages\",\n       checked: 'false',\n      \n      }\n      ,{\n        title:\"Harry Potter\",\n        image:\"https://images.gr-assets.com/books/1474154022l/3.jpg\",\n        note:\"(Harry Potter #1)\",\n        checked: 'false',\n      }\n    ]\n  }//end state\n \n// componentDidMount() -> after the initial render\n componentDidMount(){\n   // book_list local storage -> save all book list  \n    if(!localStorage.getItem('book_list')){\n      localStorage.setItem(\"book_list\", JSON.stringify(this.state.book_list));}\n      \n    localStorage.getItem('book_list') && this.setState({\n        book_list: JSON.parse(localStorage.getItem('book_list')),\n      });\n    // count local storage -> save how many book checked (completed)\n      if(!localStorage.getItem('count')){\n            localStorage.setItem(\"count\", JSON.stringify(this.state.checkCount));}\n            \n          localStorage.getItem('count') && this.setState({\n            checkCount: JSON.parse(localStorage.getItem('count')),\n            });\n     }\n  // SaveDataToLocalStorage() function to add new book data inside local storage \n  SaveDataToLocalStorage(data)\n  {\n      var a = [];\n      // Parse the serialized data back into an array of objects\n      a = JSON.parse(localStorage.getItem('book_list'));\n      // Push the new data (whether it be an object or anything else) onto the array\n      a.push(data);\n      // Re-serialize the array back into a string and store it in localStorage\n      localStorage.setItem('book_list', JSON.stringify(a));\n  }\n\n  // setBookData --> call when user click on button submit to add new data in page\n        //set the book data input to this.satae.Book_list\n  setBookData=(event)=>{\n    //prevent the form \n    event.preventDefault();\n    const copy= this.state.book_list.slice(0);//make copy of book_list array\n    copy.push(this.state.formData);//add the new book_list data to the array\n    \n    if(this.state.formData.title!==\"\" || this.state.formData.image!==\"\" || this.state.formData.note!=\"\"){\n    this.setState({\n      book_list:copy,//set the new book data to book_list by copy constant\n      formData:{ // reset the input box to empty data\n        title:\"\",\n        image:\"\",\n        note:\"\",\n        checked: 'false'\n      }\n    });\n    localStorage.setItem(\"book_list\", JSON.stringify(copy));}\n  //  this.SaveDataToLocalStorage(this.state.formData); // call function to add new data to local storage :)\n  }\n\n// getBookData--> get the book data input and save it in this.satae.formData\n  getBookData= (event)=>{\n    event.preventDefault();\n        const newBook=event.target.value;// get the value the user type\n        const originalState=this.state.formData; // get the original state\n        const copy=Object.assign({},originalState);// make copy of original state\n        const key=event.target.name;// name => title or image or note\n        copy[key]=newBook;// key take all keys(image and title)\n        //update the state with the new copy\n        this.setState({\n            formData: copy\n          });\n  }\n  \n//call function when click on button clear checked item -->to delete only checked book(completed)\n  clearBookChecked=()=>{\n    //const copyStateBook= this.state.book_list.slice(0);//make copy of book_list\n    //  used filter to remove the checked Books(completed)\n    const updatedList = this.state.book_list.filter(book => {\n      return book.checked === 'false'\n    });\n    // update book_list by use set state\n    localStorage.setItem(\"count\", JSON.stringify(0));\n\n    this.setState({\n      book_list: updatedList,\n      checkCount:0 // reset count to 0\n    });\n      \n       localStorage.setItem(\"book_list\", JSON.stringify(updatedList)); // set local storage after delete checked book\n  }\n\n  // checkBook--> check if the book checked by take the index from child component\n   checkBook = (index) => {\n      const copy= this.state.book_list.slice(0);//make copy of book_list array\n\n      if (copy[index].checked === 'checked'){ \n        /* the value of checked state equal 'checked' that means this value change form \n      checked to unchecked so it need to reset their value to be false*/   \n        copy[index].checked = \"false\"\n        this.setState({\n          checkCount:this.state.checkCount-1\n        });\n        localStorage.setItem(\"count\", JSON.stringify(this.state.checkCount-1)); \n      } \n      else {\n         // the value of checked state equal 'false' that means this value checked \n        copy[index].checked = \"checked\";\n        this.setState({\n          checkCount: this.state.checkCount+1\n          //parseInt(this.state.checkCount)+1// store num to state\n        });\n\n        localStorage.setItem(\"count\", JSON.stringify(this.state.checkCount+1));\n          //parseInt(this.state.checkCount)+1));\n      }\n          //set copy to local storage\n         // setState of book_list\n      this.setState({\n        book_list: copy,\n       \n      });\n\n      localStorage.setItem(\"book_list\", JSON.stringify(copy));\n    }\n\n    // after click on button clear all book \n  clearAll=()=>{\n    //>> clear book_list and update localStorage <<\n     this.setState({\n       book_list:[]\n       ,checkCount:0\n     });\n     localStorage.setItem(\"book_list\", JSON.stringify([]));\n    }\n  \n  render(){\n    // store all books in listOfBook by use map \n    //pass a refreance to the child as props\n    const listOfBook=this.state.book_list.map((book, index)=>{\n         return <Book book={book} \n                      index={index}\n                      checkBook={this.checkBook}  //then the Book component(child) will call the function checkBook\n                      Count={this.Count} /> ;\n    });\n\n    return (\n      <div id=\"data\" >\n        <div className=\"pageHeader\">\n                 <h1 className=\"bookListHeader\"> \n                 Books List</h1>\n        </div>\n      \n      <div className=\"input-group ml-5\">\n         <div className=\"input-group-prepend ml-2 \">\n              <span className=\"input-group-text\" id=\"addon-wrapping\" >Title</span>\n         </div>\n         <input type=\"text\" className=\"form\" placeholder=\"title\" name=\"title\" onChange={this.getBookData} value={this.state.formData.title} />\n            <div className=\"input-group-prepend ml-2\">\n                  <span className=\"input-group-text\" id=\"addon-wrapping\" >Image</span>\n            </div>\n         <input type=\"text\" className=\"form\" placeholder=\"image\" name=\"image\" onChange={this.getBookData} value={this.state.formData.image} />\n             <div className=\"input-group-prepend ml-2\">\n                 <span className=\"input-group-text\" id=\"addon-wrapping\" >Note</span>\n         </div>\n         <input type=\"text\" className=\"form\" placeholder=\"note\" name=\"note\" onChange={this.getBookData} value={this.state.formData.note}/>\n         <button type=\"submit\" className=\"btn ml-2\" onClick={this.setBookData}> ＋ Add book</button>\n      </div>\n      <br/>\n      <div className=\"btn1\">\n          <button type=\"submit\" className=\"btn1 btnCheckedClear\" onClick={this.clearBookChecked}>Clear completed book</button>\n          <button type=\"submit\" className=\"btn1 btnCheckedClear\" onClick={this.clearAll}>Clear all books</button>\n           <p className=\"btn1 count\" >{this.state.checkCount} book completed</p>\n           <p className=\"date\"> {moment().format(\"MMM Do YY\")} </p><br/>\n      </div>\n\n        {/* if there is no book  */}\n      {this.state.book_list.length === 0 ? <h3 className=\"NoBook\"> About Books List: \n      <p className=\"About\"> Books List is the site for readers and their books list. Our mission is to help \n      readers <br/> to add their books that they want to read it and allow to write their note about \n      the book <br/>also clear the book after they finished reading the book . </p>\n      </h3> : listOfBook}\n      \n\n      </div>\n    \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\" \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}